<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo Example Blog</title>
    <link>http://121.40.133.140:5050/</link>
    <description>Recent content on Hugo Example Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Sep 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://121.40.133.140:5050/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Another Hugo Post</title>
      <link>http://121.40.133.140:5050/post/another-post/</link>
      <pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://121.40.133.140:5050/post/another-post/</guid>
      <description>

&lt;h2 id=&#34;toml-yaml-json-oh-my:fa77c077e3fbd48e440da594382c44fa&#34;&gt;TOML, YAML, JSON &amp;mdash; Oh my!&lt;/h2&gt;

&lt;p&gt;One of the nifty Hugo features we should cover: flexible configuration and front matter formats! This entry has front
matter in &lt;code&gt;toml&lt;/code&gt;, unlike the last one which used &lt;code&gt;yaml&lt;/code&gt;, and &lt;code&gt;json&lt;/code&gt; is also available if that&amp;rsquo;s your preference.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;toml&lt;/code&gt; front matter used on this entry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
title = &amp;quot;Another Hugo Post&amp;quot;
description = &amp;quot;Nothing special, but one post is boring.&amp;quot;
date = &amp;quot;2014-09-02&amp;quot;
categories = [ &amp;quot;example&amp;quot;, &amp;quot;configuration&amp;quot; ]
tags = [
    &amp;quot;example&amp;quot;,
    &amp;quot;hugo&amp;quot;,
    &amp;quot;toml&amp;quot;
]
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This flexibility also extends to your site&amp;rsquo;s global configuration file. You&amp;rsquo;re free to use any format you prefer::simply
name the file &lt;code&gt;config.yaml&lt;/code&gt;, &lt;code&gt;config.toml&lt;/code&gt; or &lt;code&gt;config.json&lt;/code&gt;, and go on your merry way.&lt;/p&gt;

&lt;h2 id=&#34;json-example:fa77c077e3fbd48e440da594382c44fa&#34;&gt;JSON Example&lt;/h2&gt;

&lt;p&gt;How would this entry&amp;rsquo;s front matter look in &lt;code&gt;json&lt;/code&gt;? That&amp;rsquo;s easy enough to demonstrate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;title&amp;quot;: &amp;quot;Another Hugo Post&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Nothing special, but one post is boring.&amp;quot;,
    &amp;quot;date&amp;quot;: &amp;quot;2014-09-02&amp;quot;,
    &amp;quot;categories&amp;quot;: [ &amp;quot;example&amp;quot;, &amp;quot;configuration&amp;quot; ],
    &amp;quot;tags&amp;quot;: [
        &amp;quot;example&amp;quot;,
        &amp;quot;hugo&amp;quot;,
        &amp;quot;toml&amp;quot;
    ],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;package main

func main(){
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hello Hugo2!</title>
      <link>http://121.40.133.140:5050/post/hello-hugo2/</link>
      <pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://121.40.133.140:5050/post/hello-hugo2/</guid>
      <description>

&lt;p&gt;Hello from Hugo! If you&amp;rsquo;re reading this in your browser, good job! The file &lt;code&gt;content/post/hello-hugo.md&lt;/code&gt; has been
converted into a complete HTML document by Hugo. Isn&amp;rsquo;t that pretty nifty?&lt;/p&gt;

&lt;h2 id=&#34;a-section:ba73daebaed0138bf69ad32e1592cb36&#34;&gt;A Section&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a simple titled section where you can place whatever information you want.&lt;/p&gt;

&lt;p&gt;You can use inline HTML if you want, but really there&amp;rsquo;s not much that Markdown can&amp;rsquo;t do.&lt;/p&gt;

&lt;h2 id=&#34;showing-off-with-markdown:ba73daebaed0138bf69ad32e1592cb36&#34;&gt;Showing off with Markdown&lt;/h2&gt;

&lt;p&gt;A full cheat sheet can be found &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;here&lt;/a&gt;
or through &lt;a href=&#34;https://google.com/&#34;&gt;Google&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are some &lt;em&gt;easy&lt;/em&gt; examples for styling, though. I can&amp;rsquo;t &lt;strong&gt;emphasize&lt;/strong&gt; that enough.
Creating &lt;a href=&#34;https://google.com/&#34;&gt;links&lt;/a&gt; or &lt;code&gt;inline code&lt;/code&gt; blocks are very straightforward.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;There are some *easy* examples for styling, though. I can&#39;t **emphasize** that enough.
Creating [links](https://google.com/) or `inline code` blocks are very straightforward.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;front-matter-for-fun:ba73daebaed0138bf69ad32e1592cb36&#34;&gt;Front Matter for Fun&lt;/h2&gt;

&lt;p&gt;This is the meta data for this post. It is located at the top of the &lt;code&gt;content/post/hello-hugo.md&lt;/code&gt; markdown file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Hello Hugo!&amp;quot;
description: &amp;quot;Saying &#39;Hello&#39; from Hugo&amp;quot;
date: &amp;quot;2014-09-01&amp;quot;
categories:
  - &amp;quot;example&amp;quot;
  - &amp;quot;hello&amp;quot;
tags:
  - &amp;quot;example&amp;quot;
  - &amp;quot;hugo&amp;quot;
  - &amp;quot;blog&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This section, called &amp;lsquo;Front Matter&amp;rsquo;, is what tells Hugo about the content in this file: the &lt;code&gt;title&lt;/code&gt; of the item, the
&lt;code&gt;description&lt;/code&gt;, and the &lt;code&gt;date&lt;/code&gt; it was posted. In our example, we&amp;rsquo;ve added two custom bits of data too. The &lt;code&gt;categories&lt;/code&gt; and
&lt;code&gt;tags&lt;/code&gt; sections are used in this example for indexing/grouping content. You will learn more about what that means by
examining the code in this example and through reading the Hugo &lt;a href=&#34;http://gohugo.io/overview/introduction&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lua OOP 实现</title>
      <link>http://121.40.133.140:5050/post/lua-opp/</link>
      <pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://121.40.133.140:5050/post/lua-opp/</guid>
      <description>

&lt;h2 id=&#34;lua-oop-实现:b6c28b435c99e79032b9bfb6ad4a1f4d&#34;&gt;lua OOP 实现&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function clone(object)
    local lookup_table = {}
    local function _copy(object)
        if type(object) ~= &amp;quot;table&amp;quot; then
            return object
        elseif lookup_table[object] then
            return lookup_table[object]
        end
        local new_table = {}
        lookup_table[object] = new_table
        for key, value in pairs(object) do
            new_table[_copy(key)] = _copy(value)
        end
        return setmetatable(new_table, getmetatable(object))
    end
    return _copy(object)
end

function class(classname, super)
    local superType = type(super)
    local cls

    if superType ~= &amp;quot;function&amp;quot; and superType ~= &amp;quot;table&amp;quot; then
        superType = nil
        super = nil
    end

    if superType == &amp;quot;function&amp;quot; or (super and super.__ctype == 1) then
        -- inherited from native C++ Object
        cls = {}

        if superType == &amp;quot;table&amp;quot; then
            -- copy fields from super
            for k,v in pairs(super) do cls[k] = v end
            cls.__create = super.__create
            cls.super    = super
        else
            cls.__create = super
        end

        cls.ctor    = function() end
        cls.__cname = classname
        cls.__ctype = 1

        function cls.new(...)
            local instance = cls.__create(...)
            -- copy fields from class to native object
            for k,v in pairs(cls) do instance[k] = v end
            instance.class = cls
            instance:ctor(...)
            return instance
        end

    else
        -- inherited from Lua Object
        if super then
            cls = {}
            setmetatable(cls, {__index = super})
            cls.super = super
            if not cls.ctor then
                cls.ctor = function()
                    local parent = cls.super
                    while(parent) do
                        parent.ctor(self)
                        parent = parent.super
                    end
                end
            end
        else
            cls = {ctor = function() end}
        end

        cls.__cname = classname
        cls.__ctype = 2 -- lua
        cls.__index = cls

        function cls.new(...)
            local instance = setmetatable({}, cls)
            instance.class = cls
            instance:ctor(...)
            return instance
        end
    end

    return cls
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用示例:b6c28b435c99e79032b9bfb6ad4a1f4d&#34;&gt;使用示例&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Base = class(&amp;quot;Base&amp;quot;)

function Base:dump()
    print(&amp;quot;Base.a = &amp;quot; .. tostring(self.a))
end

function Base:ctor()
    self.a = 1
    self.b = &amp;quot;b&amp;quot;
end

function Base:setA(a)
    self.a = a
end

Sub1 = class(&amp;quot;Sub1&amp;quot;, Base)

function Sub1:setA(a)
    self.a = a
end

function Sub1:dump()
    self.super.dump(self)
    print(&amp;quot;Sub.a = &amp;quot; .. tostring(self.a))
end

--[[
function Sub1:ctor()
    self.super.ctor(self)
end
]]--

Sub2 = class(&amp;quot;Sub2&amp;quot;, Base)
function Sub2:setA(a)
    self.super.setA(self, a)
end

function Sub2:dump()
    self.super.dump(self)
    print(&amp;quot;Sub2.a = &amp;quot; .. tostring(self.a))
end

function Sub2:ctor()
    self.super.ctor(self)
end

base1 = Base:new()
base2 = Base:new()
base1:setA(3)
base1:dump()
base2:dump()

print(&amp;quot;----------&amp;quot;)

sub1 = Sub1:new()
sub2 = Sub2:new()

sub1:dump()
sub2:dump()

print(&amp;quot;----------&amp;quot;)

sub1:setA(2)
sub2:setA(3)

sub1:dump()
sub2:dump()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：调用父类方法时，使用self.spuer.method(self, &amp;hellip;), 不要使用self.spuer:method(&amp;hellip;)。 这样可以保证父类和子类的self是同一个。&lt;/p&gt;

&lt;p&gt;参考自：&lt;a href=&#34;https://github.com/cocos2d/cocos2d-x/blob/v3/cocos/scripting/lua-bindings/script/extern.lua&#34;&gt;cocos2d-x&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello Hugo!</title>
      <link>http://121.40.133.140:5050/post/hello-hugo/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://121.40.133.140:5050/post/hello-hugo/</guid>
      <description>

&lt;p&gt;Hello from Hugo! If you&amp;rsquo;re reading this in your browser, good job! The file &lt;code&gt;content/post/hello-hugo.md&lt;/code&gt; has been
converted into a complete HTML document by Hugo. Isn&amp;rsquo;t that pretty nifty?&lt;/p&gt;

&lt;h2 id=&#34;a-section:559804b0a39dd16d2d1d1238c597145a&#34;&gt;A Section&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a simple titled section where you can place whatever information you want.&lt;/p&gt;

&lt;p&gt;You can use inline HTML if you want, but really there&amp;rsquo;s not much that Markdown can&amp;rsquo;t do.&lt;/p&gt;

&lt;h2 id=&#34;showing-off-with-markdown:559804b0a39dd16d2d1d1238c597145a&#34;&gt;Showing off with Markdown&lt;/h2&gt;

&lt;p&gt;A full cheat sheet can be found &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;here&lt;/a&gt;
or through &lt;a href=&#34;https://google.com/&#34;&gt;Google&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are some &lt;em&gt;easy&lt;/em&gt; examples for styling, though. I can&amp;rsquo;t &lt;strong&gt;emphasize&lt;/strong&gt; that enough.
Creating &lt;a href=&#34;https://google.com/&#34;&gt;links&lt;/a&gt; or &lt;code&gt;inline code&lt;/code&gt; blocks are very straightforward.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;There are some *easy* examples for styling, though. I can&#39;t **emphasize** that enough.
Creating [links](https://google.com/) or `inline code` blocks are very straightforward.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;front-matter-for-fun:559804b0a39dd16d2d1d1238c597145a&#34;&gt;Front Matter for Fun&lt;/h2&gt;

&lt;p&gt;This is the meta data for this post. It is located at the top of the &lt;code&gt;content/post/hello-hugo.md&lt;/code&gt; markdown file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Hello Hugo!&amp;quot;
description: &amp;quot;Saying &#39;Hello&#39; from Hugo&amp;quot;
date: &amp;quot;2014-09-01&amp;quot;
categories:
  - &amp;quot;example&amp;quot;
  - &amp;quot;hello&amp;quot;
tags:
  - &amp;quot;example&amp;quot;
  - &amp;quot;hugo&amp;quot;
  - &amp;quot;blog&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This section, called &amp;lsquo;Front Matter&amp;rsquo;, is what tells Hugo about the content in this file: the &lt;code&gt;title&lt;/code&gt; of the item, the
&lt;code&gt;description&lt;/code&gt;, and the &lt;code&gt;date&lt;/code&gt; it was posted. In our example, we&amp;rsquo;ve added two custom bits of data too. The &lt;code&gt;categories&lt;/code&gt; and
&lt;code&gt;tags&lt;/code&gt; sections are used in this example for indexing/grouping content. You will learn more about what that means by
examining the code in this example and through reading the Hugo &lt;a href=&#34;http://gohugo.io/overview/introduction&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>